/*
 * This file was aut-generated by tiliaeparser. Do not modify. Unless.
 * Include only once.
 * https://github.com/iwasz/tiliae
 */

#include <reflection/Reflection.h>
#include "Reflection_input.cc"

namespace {
using namespace Core;
using namespace Reflection;

void createReflectionDatabase_gtkforms ()
{
	{
		Class *clazz = new Class ("Object", typeid (Core::Object &), new Reflection::PtrDeleter <Core::Object>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Core::Object, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Core::Object, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("AbstractAccessor", typeid (GtkForms::AbstractAccessor &), new Reflection::PtrDeleter <GtkForms::AbstractAccessor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addMethod (new Method ("get", createMethodWrapper (&GtkForms::AbstractAccessor::get)));
			clazz->addMethod (new Method ("set", createMethodWrapper (&GtkForms::AbstractAccessor::set)));
			clazz->addMethod (new Method ("setSessionScope", createMethodWrapper (&GtkForms::AbstractAccessor::setSessionScope)));
			clazz->addMethod (new Method ("setCurrentController", createMethodWrapper (&GtkForms::AbstractAccessor::setCurrentController)));
		}
	}
	{
		Class *clazz = new Class ("IEditor", typeid (Editor::IEditor &), new Reflection::PtrDeleter <Editor::IEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("convert", createMethodWrapper (&Editor::IEditor::convert)));
		}
	}
	{
		Class *clazz = new Class ("IFactory", typeid (Factory::IFactory &), new Reflection::PtrDeleter <Factory::IFactory>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("create", createMethodWrapper (&Factory::IFactory::create)));
		}
	}
	{
		Class *clazz = new Class ("JEditor", typeid (Editor::JEditor &), new Reflection::PtrDeleter <Editor::JEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IEditor");
			clazz->addMethod (new Method ("convert", createMethodWrapper (&Editor::JEditor::convert)));
			clazz->addMethod (new Method ("edit", createMethodWrapper (&Editor::JEditor::edit)));
		}
	}
	{
		Class *clazz = new Class ("ListToStringEditor", typeid (Editor::ListToStringEditor &), new Reflection::PtrDeleter <Editor::ListToStringEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("JEditor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Editor::ListToStringEditor, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Editor::ListToStringEditor, const std::string &, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("edit", createMethodWrapper (&Editor::ListToStringEditor::edit)));
			clazz->addMethod (new Method ("getDelimiter", createMethodWrapper (&Editor::ListToStringEditor::getDelimiter)));
			clazz->addMethod (new Method ("setDelimiter", createMethodWrapper (&Editor::ListToStringEditor::setDelimiter)));
			clazz->addMethod (new Method ("getQuotation", createMethodWrapper (&Editor::ListToStringEditor::getQuotation)));
			clazz->addMethod (new Method ("setQuotation", createMethodWrapper (&Editor::ListToStringEditor::setQuotation)));
		}
	}
	{
		Class *clazz = new Class ("ChainFactory", typeid (Factory::ChainFactory &), new Reflection::PtrDeleter <Factory::ChainFactory>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IFactory");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Factory::ChainFactory, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Factory::ChainFactory, _Bool>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("create", createMethodWrapper (&Factory::ChainFactory::create)));
			clazz->addMethod (new Method ("setFactories", createMethodWrapper (&Factory::ChainFactory::setFactories)));
			clazz->addMethod (new Method ("addFactory", createMethodWrapper (&Factory::ChainFactory::addFactory)));
			clazz->addMethod (new Method ("getFactories", createMethodWrapper (&Factory::ChainFactory::getFactories)));
		}
	}
	{
		Class *clazz = new Class ("K202", typeid (k202::K202 &), new Reflection::PtrDeleter <k202::K202>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
		}
	}
	{
		Class *clazz = new Class ("Sender", typeid (Signal::Sender &), new Reflection::PtrDeleter <Signal::Sender>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, void *>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, void *, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getOwnerObject", createMethodWrapper (&Signal::Sender::getOwnerObject)));
			clazz->addMethod (new Method ("setOwnerObject", createMethodWrapper (&Signal::Sender::setOwnerObject)));
			clazz->addMethod (new Method ("getScope", createMethodWrapper (&Signal::Sender::getScope)));
			clazz->addMethod (new Method ("setScope", createMethodWrapper (&Signal::Sender::setScope)));
			clazz->addMethod (new Method ("setPath", createMethodWrapper (&Signal::Sender::setPath)));
			clazz->addMethod (new Method ("getPath", createMethodWrapper (&Signal::Sender::getPath)));
			clazz->addMethod (new Method ("getParamVector", createMethodWrapper (&Signal::Sender::getParamVector)));
			clazz->addMethod (new Method ("setParamVector", createMethodWrapper (&Signal::Sender::setParamVector)));
			clazz->addMethod (new Method ("getParamMap", createMethodWrapper (&Signal::Sender::getParamMap)));
			clazz->addMethod (new Method ("setParamMap", createMethodWrapper (&Signal::Sender::setParamMap)));
		}
	}
	{
		Class *clazz = new Class ("IValidator", typeid (GtkForms::IValidator &), new Reflection::PtrDeleter <GtkForms::IValidator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("validate", createMethodWrapper (&GtkForms::IValidator::validate)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::IValidator::getModel)));
		}
	}
	{
		Class *clazz = new Class ("ValidatorVector", typeid (GtkForms::ValidatorVector&), new PtrDeleter <GtkForms::ValidatorVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::ValidatorVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::ValidatorVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::ValidatorVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::ValidatorVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::ValidatorVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("IPageDecorator", typeid (GtkForms::IPageDecorator &), new Reflection::PtrDeleter <GtkForms::IPageDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("preShow", createMethodWrapper (&GtkForms::IPageDecorator::preShow)));
			clazz->addMethod (new Method ("postShow", createMethodWrapper (&GtkForms::IPageDecorator::postShow)));
			clazz->addMethod (new Method ("preSubmit", createMethodWrapper (&GtkForms::IPageDecorator::preSubmit)));
			clazz->addMethod (new Method ("postRefresh", createMethodWrapper (&GtkForms::IPageDecorator::postRefresh)));
			clazz->addMethod (new Method ("preClose", createMethodWrapper (&GtkForms::IPageDecorator::preClose)));
			clazz->addMethod (new Method ("preReparent", createMethodWrapper (&GtkForms::IPageDecorator::preReparent)));
			clazz->addMethod (new Method ("postReparent", createMethodWrapper (&GtkForms::IPageDecorator::postReparent)));
		}
	}
	{
		Class *clazz = new Class ("PageDecoratorVector", typeid (GtkForms::PageDecoratorVector&), new PtrDeleter <GtkForms::PageDecoratorVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::PageDecoratorVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("IMapping", typeid (GtkForms::IMapping &), new Reflection::PtrDeleter <GtkForms::IMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("getWidget", createMethodWrapper (&GtkForms::IMapping::getWidget)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::IMapping::getModel)));
			clazz->addMethod (new Method ("getProperty", createMethodWrapper (&GtkForms::IMapping::getProperty)));
			clazz->addMethod (new Method ("getConstValue", createMethodWrapper (&GtkForms::IMapping::getConstValue)));
		}
	}
	{
		Class *clazz = new Class ("Mapping", typeid (GtkForms::Mapping &), new Reflection::PtrDeleter <GtkForms::Mapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IMapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::Mapping, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("widget", Reflection::createFieldWrapper (&GtkForms::Mapping::widget)));
			clazz->addField (new Field ("property", Reflection::createFieldWrapper (&GtkForms::Mapping::property)));
			clazz->addField (new Field ("model", Reflection::createFieldWrapper (&GtkForms::Mapping::model)));
			clazz->addField (new Field ("m2vEditor", Reflection::createFieldWrapper (&GtkForms::Mapping::m2vEditor)));
			clazz->addField (new Field ("v2mEditor", Reflection::createFieldWrapper (&GtkForms::Mapping::v2mEditor)));
			clazz->addField (new Field ("constValue", Reflection::createFieldWrapper (&GtkForms::Mapping::constValue)));
			clazz->addMethod (new Method ("getWidget", createMethodWrapper (&GtkForms::Mapping::getWidget)));
			clazz->addMethod (new Method ("getProperty", createMethodWrapper (&GtkForms::Mapping::getProperty)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::Mapping::getModel)));
			clazz->addMethod (new Method ("getConstValue", createMethodWrapper (&GtkForms::Mapping::getConstValue)));
		}
	}
	{
		Class *clazz = new Class ("MappingVector", typeid (GtkForms::MappingVector&), new PtrDeleter <GtkForms::MappingVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::MappingVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("ISignalAdapter", typeid (GtkForms::ISignalAdapter &), new Reflection::PtrDeleter <GtkForms::ISignalAdapter>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("getSignal", createMethodWrapper (&GtkForms::ISignalAdapter::getSignal)));
			clazz->addMethod (new Method ("getGObjectName", createMethodWrapper (&GtkForms::ISignalAdapter::getGObjectName)));
			clazz->addMethod (new Method ("getWidgetId", createMethodWrapper (&GtkForms::ISignalAdapter::getWidgetId)));
			clazz->addMethod (new Method ("adapt", createMethodWrapper (&GtkForms::ISignalAdapter::adapt)));
		}
	}
	{
		Class *clazz = new Class ("SignalAdapterVector", typeid (GtkForms::SignalAdapterVector&), new PtrDeleter <GtkForms::SignalAdapterVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::SignalAdapterVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::SignalAdapterVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::SignalAdapterVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::SignalAdapterVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::SignalAdapterVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("AbstractSignalAdapter", typeid (GtkForms::AbstractSignalAdapter &), new Reflection::PtrDeleter <GtkForms::AbstractSignalAdapter>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("ISignalAdapter");
			clazz->addMethod (new Method ("getSignal", createMethodWrapper (&GtkForms::AbstractSignalAdapter::getSignal)));
			clazz->addMethod (new Method ("getGObjectName", createMethodWrapper (&GtkForms::AbstractSignalAdapter::getGObjectName)));
			clazz->addMethod (new Method ("getWidgetId", createMethodWrapper (&GtkForms::AbstractSignalAdapter::getWidgetId)));
			clazz->addMethod (new Method ("setSignal", createMethodWrapper (&GtkForms::AbstractSignalAdapter::setSignal)));
			clazz->addMethod (new Method ("setGObjectName", createMethodWrapper (&GtkForms::AbstractSignalAdapter::setGObjectName)));
			clazz->addMethod (new Method ("setWidgetId", createMethodWrapper (&GtkForms::AbstractSignalAdapter::setWidgetId)));
		}
	}
	{
		Class *clazz = new Class ("AbstractView", typeid (GtkForms::AbstractView &), new Reflection::PtrDeleter <GtkForms::AbstractView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addField (new Field ("name", Reflection::createFieldWrapper (&GtkForms::AbstractView::name)));
			clazz->addField (new Field ("mappings", Reflection::createFieldWrapper (&GtkForms::AbstractView::mappings)));
			clazz->addField (new Field ("decorators", Reflection::createFieldWrapper (&GtkForms::AbstractView::decorators)));
			clazz->addField (new Field ("signalAdapters", Reflection::createFieldWrapper (&GtkForms::AbstractView::signalAdapters)));
			clazz->addMethod (new Method ("getName", createMethodWrapper (&GtkForms::AbstractView::getName)));
			clazz->addMethod (new Method ("contId", createMethodWrapper (&GtkForms::AbstractView::contId)));
			clazz->addMethod (new Method ("loadUi", createMethodWrapper (&GtkForms::AbstractView::loadUi)));
			clazz->addMethod (new Method ("show", createMethodWrapper (&GtkForms::AbstractView::show)));
			clazz->addMethod (new Method ("hide", createMethodWrapper (&GtkForms::AbstractView::hide)));
			clazz->addMethod (new Method ("refresh", createMethodWrapper (&GtkForms::AbstractView::refresh)));
			clazz->addMethod (new Method ("reparent", createMethodWrapper (&GtkForms::AbstractView::reparent)));
			clazz->addMethod (new Method ("destroyUi", createMethodWrapper (&GtkForms::AbstractView::destroyUi)));
			clazz->addMethod (new Method ("isLoaded", createMethodWrapper (&GtkForms::AbstractView::isLoaded)));
			clazz->addMethod (new Method ("getUiOrThrow", createMethodWrapper (&GtkForms::AbstractView::getUiOrThrow)));
			clazz->addMethod (new Method ("getInputOutputWidgets", createMethodWrapper (&GtkForms::AbstractView::getInputOutputWidgets)));
			clazz->addMethod (new Method ("getSlots", createMethodWrapper (&GtkForms::AbstractView::getSlots)));
			clazz->addMethod (new Method ("getSlot", createMethodWrapper (&GtkForms::AbstractView::getSlot)));
			clazz->addMethod (new Method ("printStructure", createMethodWrapper (&GtkForms::AbstractView::printStructure)));
			clazz->addMethod (new Method ("getMappingsByInputRange", createMethodWrapper (&GtkForms::AbstractView::getMappingsByInputRange)));
			clazz->addMethod (new Method ("getMappingsByModelRange", createMethodWrapper (&GtkForms::AbstractView::getMappingsByModelRange)));
			clazz->addMethod (new Method ("runDecorators", createMethodWrapper (&GtkForms::AbstractView::runDecorators)));
			clazz->addMethod (new Method ("connectSignals", createMethodWrapper (&GtkForms::AbstractView::connectSignals)));
			clazz->addMethod (new Method ("getSignalAdapters", createMethodWrapper (&GtkForms::AbstractView::getSignalAdapters)));
			clazz->addMethod (new Method ("getControllerFromUi", createMethodWrapper (&GtkForms::AbstractView::getControllerFromUi)));
			clazz->addMethod (new Method ("setControllerToUi", createMethodWrapper (&GtkForms::AbstractView::setControllerToUi)));
			clazz->addMethod (new Method ("getController", createMethodWrapper (&GtkForms::AbstractView::getController)));
			clazz->addMethod (new Method ("setController", createMethodWrapper (&GtkForms::AbstractView::setController)));
			clazz->addMethod (new Method ("setConfig", createMethodWrapper (&GtkForms::AbstractView::setConfig)));
			clazz->addMethod (new Method ("isDeleteOnClose", createMethodWrapper (&GtkForms::AbstractView::isDeleteOnClose)));
			clazz->addMethod (new Method ("setDeleteOnClose", createMethodWrapper (&GtkForms::AbstractView::setDeleteOnClose)));
		}
	}
	{
		Class *clazz = new Class ("ControllerMap", typeid (GtkForms::ControllerMap&), new PtrDeleter <GtkForms::ControllerMap >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::ControllerMap, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::ControllerMap > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::ControllerMap > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::ControllerMap > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::ControllerMap > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("AbstractController", typeid (GtkForms::AbstractController &), new Reflection::PtrDeleter <GtkForms::AbstractController>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addField (new Field ("validators", Reflection::createFieldWrapper (&GtkForms::AbstractController::validators)));
			clazz->addField (new Field ("loopDelayMs", Reflection::createFieldWrapper (&GtkForms::AbstractController::loopDelayMs)));
			clazz->addField (new Field ("alsoOpen", Reflection::createFieldWrapper (&GtkForms::AbstractController::alsoOpen)));
			clazz->addMethod (new Method ("set", createMethodWrapper (&GtkForms::AbstractController::set)));
			clazz->addMethod (new Method ("get", createMethodWrapper (&GtkForms::AbstractController::get)));
			clazz->addMethod (new Method ("setToSessionScope", createMethodWrapper (&GtkForms::AbstractController::setToSessionScope)));
			clazz->addMethod (new Method ("clearControllerScope", createMethodWrapper (&GtkForms::AbstractController::clearControllerScope)));
			clazz->addMethod (new Method ("getModelAccessor", createMethodWrapper (&GtkForms::AbstractController::getModelAccessor)));
			clazz->addMethod (new Method ("open", createMethodWrapper (&GtkForms::AbstractController::open)));
			clazz->addMethod (new Method ("openList", createMethodWrapper (&GtkForms::AbstractController::openList)));
			clazz->addMethod (new Method ("closeThis", createMethodWrapper (&GtkForms::AbstractController::closeThis)));
			clazz->addMethod (new Method ("close", createMethodWrapper (&GtkForms::AbstractController::close)));
			clazz->addMethod (new Method ("closeList", createMethodWrapper (&GtkForms::AbstractController::closeList)));
			clazz->addMethod (new Method ("replace", createMethodWrapper (&GtkForms::AbstractController::replace)));
			clazz->addMethod (new Method ("getName", createMethodWrapper (&GtkForms::AbstractController::getName)));
			clazz->addMethod (new Method ("contId", createMethodWrapper (&GtkForms::AbstractController::contId)));
			clazz->addMethod (new Method ("isDeleteOnClose", createMethodWrapper (&GtkForms::AbstractController::isDeleteOnClose)));
			clazz->addMethod (new Method ("setDeleteOnClose", createMethodWrapper (&GtkForms::AbstractController::setDeleteOnClose)));
			clazz->addMethod (new Method ("findByName", createMethodWrapper (&GtkForms::AbstractController::findByName)));
			clazz->addMethod (new Method ("validate", createMethodWrapper (&GtkForms::AbstractController::validate)));
			clazz->addMethod (new Method ("getValidators", createMethodWrapper (&GtkForms::AbstractController::getValidators)));
			clazz->addMethod (new Method ("refresh", createMethodWrapper (&GtkForms::AbstractController::refresh)));
			clazz->addMethod (new Method ("submit", createMethodWrapper (&GtkForms::AbstractController::submit)));
			clazz->addMethod (new Method ("onStart", createMethodWrapper (&GtkForms::AbstractController::onStart)));
			clazz->addMethod (new Method ("onSubmit", createMethodWrapper (&GtkForms::AbstractController::onSubmit)));
			clazz->addMethod (new Method ("onStop", createMethodWrapper (&GtkForms::AbstractController::onStop)));
			clazz->addMethod (new Method ("getLoopDelayMs", createMethodWrapper (&GtkForms::AbstractController::getLoopDelayMs)));
			clazz->addMethod (new Method ("getLastMs", createMethodWrapper (&GtkForms::AbstractController::getLastMs)));
			clazz->addMethod (new Method ("performIdle", createMethodWrapper (&GtkForms::AbstractController::performIdle)));
			clazz->addMethod (new Method ("onQuit", createMethodWrapper (&GtkForms::AbstractController::onQuit)));
			clazz->addMethod (new Method ("onIdle", createMethodWrapper (&GtkForms::AbstractController::onIdle)));
			clazz->addMethod (new Method ("getViews", createMethodWrapper (&GtkForms::AbstractController::getViews)));
			clazz->addMethod (new Method ("addView", createMethodWrapper (&GtkForms::AbstractController::addView)));
			clazz->addMethod (new Method ("clearViews", createMethodWrapper (&GtkForms::AbstractController::clearViews)));
			clazz->addMethod (new Method ("getApp", createMethodWrapper (&GtkForms::AbstractController::getApp)));
		}
	}
	{
		Class *clazz = new Class ("DummyController", typeid (GtkForms::DummyController &), new Reflection::PtrDeleter <GtkForms::DummyController>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractController");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::DummyController, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("onStart", createMethodWrapper (&GtkForms::DummyController::onStart)));
			clazz->addMethod (new Method ("onSubmit", createMethodWrapper (&GtkForms::DummyController::onSubmit)));
			clazz->addMethod (new Method ("onStop", createMethodWrapper (&GtkForms::DummyController::onStop)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::DummyController::getModel)));
			clazz->addMethod (new Method ("setModel", createMethodWrapper (&GtkForms::DummyController::setModel)));
			clazz->addMethod (new Method ("getView", createMethodWrapper (&GtkForms::DummyController::getView)));
			clazz->addMethod (new Method ("setView", createMethodWrapper (&GtkForms::DummyController::setView)));
		}
	}
	{
		Class *clazz = new Class ("HierarchicalAccessor", typeid (GtkForms::HierarchicalAccessor &), new Reflection::PtrDeleter <GtkForms::HierarchicalAccessor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractAccessor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::HierarchicalAccessor, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::HierarchicalAccessor, Core::VariantMap *>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("get", createMethodWrapper (&GtkForms::HierarchicalAccessor::get)));
			clazz->addMethod (new Method ("set", createMethodWrapper (&GtkForms::HierarchicalAccessor::set)));
		}
	}
	{
		Class *clazz = new Class ("IHandler", typeid (GtkForms::IHandler &), new Reflection::PtrDeleter <GtkForms::IHandler>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("run", createMethodWrapper (&GtkForms::IHandler::run)));
		}
	}
	{
		Class *clazz = new Class ("AbstractPageDecorator", typeid (GtkForms::AbstractPageDecorator &), new Reflection::PtrDeleter <GtkForms::AbstractPageDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IPageDecorator");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::AbstractPageDecorator, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("preShow", createMethodWrapper (&GtkForms::AbstractPageDecorator::preShow)));
			clazz->addMethod (new Method ("postShow", createMethodWrapper (&GtkForms::AbstractPageDecorator::postShow)));
			clazz->addMethod (new Method ("preSubmit", createMethodWrapper (&GtkForms::AbstractPageDecorator::preSubmit)));
			clazz->addMethod (new Method ("postRefresh", createMethodWrapper (&GtkForms::AbstractPageDecorator::postRefresh)));
			clazz->addMethod (new Method ("preClose", createMethodWrapper (&GtkForms::AbstractPageDecorator::preClose)));
			clazz->addMethod (new Method ("preReparent", createMethodWrapper (&GtkForms::AbstractPageDecorator::preReparent)));
			clazz->addMethod (new Method ("postReparent", createMethodWrapper (&GtkForms::AbstractPageDecorator::postReparent)));
		}
	}
	{
		Class *clazz = new Class ("CloseOnEscapeDecorator", typeid (GtkForms::CloseOnEscapeDecorator &), new Reflection::PtrDeleter <GtkForms::CloseOnEscapeDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractPageDecorator");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::CloseOnEscapeDecorator, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("preShow", createMethodWrapper (&GtkForms::CloseOnEscapeDecorator::preShow)));
		}
	}
	{
		Class *clazz = new Class ("DimensionRestoreDatabase", typeid (GtkForms::DimensionRestoreDatabase &), new Reflection::PtrDeleter <GtkForms::DimensionRestoreDatabase>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::DimensionRestoreDatabase, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("load", createMethodWrapper (&GtkForms::DimensionRestoreDatabase::load)));
			clazz->addMethod (new Method ("save", createMethodWrapper (&GtkForms::DimensionRestoreDatabase::save)));
			clazz->addMethod (new Method ("set", createMethodWrapper (&GtkForms::DimensionRestoreDatabase::set)));
			clazz->addMethod (new Method ("get", createMethodWrapper (&GtkForms::DimensionRestoreDatabase::get)));
		}
	}
	{
		Class *clazz = new Class ("DimensionRestoreDecorator", typeid (GtkForms::DimensionRestoreDecorator &), new Reflection::PtrDeleter <GtkForms::DimensionRestoreDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractPageDecorator");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::DimensionRestoreDecorator, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("widget", Reflection::createFieldWrapper (&GtkForms::DimensionRestoreDecorator::widget)));
			clazz->addField (new Field ("key", Reflection::createFieldWrapper (&GtkForms::DimensionRestoreDecorator::key)));
			clazz->addField (new Field ("database", Reflection::createFieldWrapper (&GtkForms::DimensionRestoreDecorator::database)));
			clazz->addMethod (new Method ("postShow", createMethodWrapper (&GtkForms::DimensionRestoreDecorator::postShow)));
			clazz->addMethod (new Method ("preShow", createMethodWrapper (&GtkForms::DimensionRestoreDecorator::preShow)));
		}
	}
	{
		Class *clazz = new Class ("DimensionRestoreDatabaseDecorator", typeid (GtkForms::DimensionRestoreDatabaseDecorator &), new Reflection::PtrDeleter <GtkForms::DimensionRestoreDatabaseDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractPageDecorator");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::DimensionRestoreDatabaseDecorator, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("database", Reflection::createFieldWrapper (&GtkForms::DimensionRestoreDatabaseDecorator::database)));
			clazz->addMethod (new Method ("preShow", createMethodWrapper (&GtkForms::DimensionRestoreDatabaseDecorator::preShow)));
			clazz->addMethod (new Method ("preClose", createMethodWrapper (&GtkForms::DimensionRestoreDatabaseDecorator::preClose)));
		}
	}
	{
		Class *clazz = new Class ("GtkTreeViewDecorator", typeid (GtkForms::GtkTreeViewDecorator &), new Reflection::PtrDeleter <GtkForms::GtkTreeViewDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractPageDecorator");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::GtkTreeViewDecorator, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("postRefreshExpandAll", Reflection::createFieldWrapper (&GtkForms::GtkTreeViewDecorator::postRefreshExpandAll)));
			clazz->addField (new Field ("postStartExpandAll", Reflection::createFieldWrapper (&GtkForms::GtkTreeViewDecorator::postStartExpandAll)));
			clazz->addMethod (new Method ("postShow", createMethodWrapper (&GtkForms::GtkTreeViewDecorator::postShow)));
			clazz->addMethod (new Method ("postRefresh", createMethodWrapper (&GtkForms::GtkTreeViewDecorator::postRefresh)));
			clazz->addMethod (new Method ("getWidget", createMethodWrapper (&GtkForms::GtkTreeViewDecorator::getWidget)));
			clazz->addMethod (new Method ("setWidget", createMethodWrapper (&GtkForms::GtkTreeViewDecorator::setWidget)));
		}
	}
	{
		Class *clazz = new Class ("ValidationDecorator", typeid (GtkForms::ValidationDecorator &), new Reflection::PtrDeleter <GtkForms::ValidationDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractPageDecorator");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::ValidationDecorator, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("preSubmit", createMethodWrapper (&GtkForms::ValidationDecorator::preSubmit)));
		}
	}
	{
		Class *clazz = new Class ("Column", typeid (GtkForms::Column &), new Reflection::PtrDeleter <GtkForms::Column>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Mapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::Column, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("isStoreThisRow", createMethodWrapper (&GtkForms::Column::isStoreThisRow)));
			clazz->addMethod (new Method ("setStoreThisRow", createMethodWrapper (&GtkForms::Column::setStoreThisRow)));
		}
	}
	{
		Class *clazz = new Class ("AdjustmentMapping", typeid (GtkForms::AdjustmentMapping &), new Reflection::PtrDeleter <GtkForms::AdjustmentMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Mapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::AdjustmentMapping, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("AssociationMap", typeid (AssociationMap&), new PtrDeleter <AssociationMap >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <AssociationMap, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <AssociationMap > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <AssociationMap > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <AssociationMap > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <AssociationMap > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("Config", typeid (GtkForms::Config &), new Reflection::PtrDeleter <GtkForms::Config>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::Config, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("loopDelayMs", Reflection::createFieldWrapper (&GtkForms::Config::loopDelayMs)));
			clazz->addField (new Field ("quitHandler", Reflection::createFieldWrapper (&GtkForms::Config::quitHandler)));
			clazz->addField (new Field ("logMappings", Reflection::createFieldWrapper (&GtkForms::Config::logMappings)));
			clazz->addField (new Field ("useWidgetId", Reflection::createFieldWrapper (&GtkForms::Config::useWidgetId)));
		}
	}
	{
		Class *clazz = new Class ("App", typeid (GtkForms::App &), new Reflection::PtrDeleter <GtkForms::App>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::App, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("quit", createMethodWrapper (&GtkForms::App::quit)));
			clazz->addMethod (new Method ("userQuitRequest", createMethodWrapper (&GtkForms::App::userQuitRequest)));
			clazz->addMethod (new Method ("show", createMethodWrapper (&GtkForms::App::show)));
			clazz->addMethod (new Method ("hide", createMethodWrapper (&GtkForms::App::hide)));
			clazz->addMethod (new Method ("getContext", createMethodWrapper (&GtkForms::App::getContext)));
			clazz->addMethod (new Method ("getBeanWrapper", createMethodWrapper (&GtkForms::App::getBeanWrapper)));
			clazz->addMethod (new Method ("getConfig", createMethodWrapper (&GtkForms::App::getConfig)));
		}
	}
	{
		Class *clazz = new Class ("BuilderView", typeid (GtkForms::BuilderView &), new Reflection::PtrDeleter <GtkForms::BuilderView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::BuilderView, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("file", Reflection::createFieldWrapper (&GtkForms::BuilderView::file)));
			clazz->addField (new Field ("alsoLoad", Reflection::createFieldWrapper (&GtkForms::BuilderView::alsoLoad)));
			clazz->addField (new Field ("loadWholeFile", Reflection::createFieldWrapper (&GtkForms::BuilderView::loadWholeFile)));
			clazz->addMethod (new Method ("loadUi", createMethodWrapper (&GtkForms::BuilderView::loadUi)));
			clazz->addMethod (new Method ("isLoaded", createMethodWrapper (&GtkForms::BuilderView::isLoaded)));
			clazz->addMethod (new Method ("destroyUi", createMethodWrapper (&GtkForms::BuilderView::destroyUi)));
			clazz->addMethod (new Method ("getUiOrThrow", createMethodWrapper (&GtkForms::BuilderView::getUiOrThrow)));
			clazz->addMethod (new Method ("connectSignals", createMethodWrapper (&GtkForms::BuilderView::connectSignals)));
		}
	}
	{
		Class *clazz = new Class ("KeyPressEventAdapter", typeid (GtkForms::KeyPressEventAdapter &), new Reflection::PtrDeleter <GtkForms::KeyPressEventAdapter>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractSignalAdapter");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::KeyPressEventAdapter, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("adapt", createMethodWrapper (&GtkForms::KeyPressEventAdapter::adapt)));
			clazz->addMethod (new Method ("getSignal", createMethodWrapper (&GtkForms::KeyPressEventAdapter::getSignal)));
		}
	}
	{
		Class *clazz = new Class ("RowActivatedAdapter", typeid (GtkForms::RowActivatedAdapter &), new Reflection::PtrDeleter <GtkForms::RowActivatedAdapter>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractSignalAdapter");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::RowActivatedAdapter, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getSignal", createMethodWrapper (&GtkForms::RowActivatedAdapter::getSignal)));
			clazz->addMethod (new Method ("setSignal", createMethodWrapper (&GtkForms::RowActivatedAdapter::setSignal)));
			clazz->addMethod (new Method ("adapt", createMethodWrapper (&GtkForms::RowActivatedAdapter::adapt)));
			clazz->addMethod (new Method ("getColumnNumber", createMethodWrapper (&GtkForms::RowActivatedAdapter::getColumnNumber)));
			clazz->addMethod (new Method ("setColumnNumber", createMethodWrapper (&GtkForms::RowActivatedAdapter::setColumnNumber)));
		}
	}
	{
		Class *clazz = new Class ("FileChooserAdapter", typeid (GtkForms::FileChooserAdapter &), new Reflection::PtrDeleter <GtkForms::FileChooserAdapter>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractSignalAdapter");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::FileChooserAdapter, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("adapt", createMethodWrapper (&GtkForms::FileChooserAdapter::adapt)));
			clazz->addMethod (new Method ("getSignal", createMethodWrapper (&GtkForms::FileChooserAdapter::getSignal)));
		}
	}
	{
		Class *clazz = new Class ("AbstractValidator", typeid (GtkForms::AbstractValidator &), new Reflection::PtrDeleter <GtkForms::AbstractValidator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IValidator");
			clazz->addField (new Field ("model", Reflection::createFieldWrapper (&GtkForms::AbstractValidator::model)));
			clazz->addField (new Field ("params", Reflection::createFieldWrapper (&GtkForms::AbstractValidator::params)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::AbstractValidator::getModel)));
		}
	}
	{
		Class *clazz = new Class ("NotBlankValidator", typeid (GtkForms::NotBlankValidator &), new Reflection::PtrDeleter <GtkForms::NotBlankValidator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractValidator");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::NotBlankValidator, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("validate", createMethodWrapper (&GtkForms::NotBlankValidator::validate)));
		}
	}
	{
		Class *clazz = new Class ("PixbufColumn", typeid (GtkForms::PixbufColumn &), new Reflection::PtrDeleter <GtkForms::PixbufColumn>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Column");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::PixbufColumn, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("dict", Reflection::createFieldWrapper (&GtkForms::PixbufColumn::dict)));
			clazz->addField (new Field ("cache", Reflection::createFieldWrapper (&GtkForms::PixbufColumn::cache)));
			clazz->addMethod (new Method ("init", createMethodWrapper (&GtkForms::PixbufColumn::init)));
			clazz->addMethod (new Method ("view2Model", createMethodWrapper (&GtkForms::PixbufColumn::view2Model)));
		}
	}
	{
		Class *clazz = new Class ("PixbufMapping", typeid (GtkForms::PixbufMapping &), new Reflection::PtrDeleter <GtkForms::PixbufMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Mapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::PixbufMapping, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("maxWidth", Reflection::createFieldWrapper (&GtkForms::PixbufMapping::maxWidth)));
			clazz->addField (new Field ("maxHeight", Reflection::createFieldWrapper (&GtkForms::PixbufMapping::maxHeight)));
			clazz->addField (new Field ("dict", Reflection::createFieldWrapper (&GtkForms::PixbufMapping::dict)));
		}
	}
	{
		Class *clazz = new Class ("TableFilterMapping", typeid (GtkForms::TableFilterMapping &), new Reflection::PtrDeleter <GtkForms::TableFilterMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Mapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::TableFilterMapping, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getColumnNumber", createMethodWrapper (&GtkForms::TableFilterMapping::getColumnNumber)));
			clazz->addMethod (new Method ("setColumnNumber", createMethodWrapper (&GtkForms::TableFilterMapping::setColumnNumber)));
		}
	}
	{
		Class *clazz = new Class ("TableMapping", typeid (GtkForms::TableMapping &), new Reflection::PtrDeleter <GtkForms::TableMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IMapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::TableMapping, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("widget", Reflection::createFieldWrapper (&GtkForms::TableMapping::widget)));
			clazz->addField (new Field ("model", Reflection::createFieldWrapper (&GtkForms::TableMapping::model)));
			clazz->addField (new Field ("property", Reflection::createFieldWrapper (&GtkForms::TableMapping::property)));
			clazz->addField (new Field ("columns", Reflection::createFieldWrapper (&GtkForms::TableMapping::columns)));
			clazz->addField (new Field ("modelColumnCopy", Reflection::createFieldWrapper (&GtkForms::TableMapping::modelColumnCopy)));
			clazz->addField (new Field ("constValue", Reflection::createFieldWrapper (&GtkForms::TableMapping::constValue)));
			clazz->addMethod (new Method ("getWidget", createMethodWrapper (&GtkForms::TableMapping::getWidget)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::TableMapping::getModel)));
			clazz->addMethod (new Method ("getProperty", createMethodWrapper (&GtkForms::TableMapping::getProperty)));
			clazz->addMethod (new Method ("getConstValue", createMethodWrapper (&GtkForms::TableMapping::getConstValue)));
		}
	}
	{
		Class *clazz = new Class ("TextViewMapping", typeid (GtkForms::TextViewMapping &), new Reflection::PtrDeleter <GtkForms::TextViewMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Mapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::TextViewMapping, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("EmptyView", typeid (GtkForms::EmptyView &), new Reflection::PtrDeleter <GtkForms::EmptyView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::EmptyView, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("loadUi", createMethodWrapper (&GtkForms::EmptyView::loadUi)));
			clazz->addMethod (new Method ("isLoaded", createMethodWrapper (&GtkForms::EmptyView::isLoaded)));
			clazz->addMethod (new Method ("destroyUi", createMethodWrapper (&GtkForms::EmptyView::destroyUi)));
			clazz->addMethod (new Method ("connectSignals", createMethodWrapper (&GtkForms::EmptyView::connectSignals)));
		}
	}
}

struct Sentinel_gtkforms {
        Sentinel_gtkforms ()
        {
                createReflectionDatabase_gtkforms ();
        }
};

static Sentinel_gtkforms sentinel_gtkforms;
} // namespace

